name: Monorepo CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # ======================================
  # BUILD STAGE
  # ======================================
  build:
    name: Build Stage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install root dependencies
        run: |
          echo "Installing root dependencies..."
          npm ci

      - name: Build backend
        run: |
          echo "Building backend..."
          npm run build:backend --if-present

      - name: Build frontend
        run: |
          echo "Building frontend..."
          npm run build:frontend

  # ======================================
  # TEST STAGE
  # ======================================
  test:
    name: Test Stage
    runs-on: ubuntu-latest
    needs: build

    env:
      NODE_ENV: test
      MONGODB_ATLAS_URI: ${{ secrets.MONGODB_ATLAS_URI || '' }}
      JEST_JUNIT_OUTPUT_DIR: test-results

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Backend Tests
        run: |
          echo "Running backend tests..."
          npm run test:backend

      - name: Run Frontend Tests
        run: |
          echo "Running frontend tests..."
          npm run test:frontend || echo "No frontend tests yet"

  # ======================================
  # COVERAGE STAGE
  # ======================================
  coverage:
    name: Coverage Stage
    runs-on: ubuntu-latest
    needs: test

    env:
      MONGODB_ATLAS_URI: ${{ secrets.MONGODB_ATLAS_URI || '' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate backend coverage report
        run: |
          echo "Generating coverage for backend..."
          cd apps/backend
          npm run coverage || npx jest --coverage || echo "Coverage completed"

  # ======================================
  # LINT STAGE
  # ======================================
  lint:
    name: Lint Stage
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Linting
        run: |
          echo "Running linting for all apps..."
          npm run lint

      - name: Save lint reports
        if: always()
        run: |
          mkdir -p lint-report
          cd apps/backend
          npx eslint . --ext .js,.jsx,.ts,.tsx -f html -o ../../lint-report/backend-lint.html 2>/dev/null || echo "Backend lint report done"
          cd ../frontend
          npx eslint . --ext .js,.jsx,.ts,.tsx -f html -o ../../lint-report/frontend-lint.html 2>/dev/null || echo "Frontend lint report done"

  # ======================================
  # SECURITY SCAN STAGE
  # ======================================
  security:
    name: Security Scan Stage
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          echo "Running npm audit..."
          npm audit --audit-level moderate

      - name: Run security audit with report
        if: always()
        run: |
          npm audit --json > security-report.json || echo "Security audit completed with issues"

  # ======================================
  # DEPLOYMENT ARTIFACT STAGE
  # ======================================
  deploy:
    name: Deployment Artifact
    runs-on: ubuntu-latest
    needs: [build, test, coverage, lint, security]

    env:
      NODE_ENV: test
      MONGODB_ATLAS_URI: ${{ secrets.MONGODB_ATLAS_URI || '' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate all reports
        run: |
          # Create reports directory
          mkdir -p reports
          
          # Generate backend test results
          echo "Generating backend reports..."
          cd apps/backend
          npm test || echo "Backend tests completed"
          cp -r test-results ../../reports/backend-test-results 2>/dev/null || echo "No backend test results"
          cp junit.xml ../../reports/ 2>/dev/null || echo "No junit.xml"
          
          # Generate backend coverage
          npm run coverage || npx jest --coverage || echo "Coverage completed"
          cp -r coverage ../../reports/backend-coverage 2>/dev/null || echo "No coverage directory"
          cp lcov.info ../../reports/backend-lcov.info 2>/dev/null || echo "No lcov.info"
          
          cd ../..
          
          # Generate lint reports
          mkdir -p reports/lint-report
          cd apps/backend
          npx eslint . --ext .js -f html -o ../../reports/lint-report/backend-eslint.html 2>/dev/null || echo "Backend lint report generated"
          cd ../frontend
          npx eslint . --ext .js,.jsx -f html -o ../../reports/lint-report/frontend-eslint.html 2>/dev/null || echo "Frontend lint report generated"
          
          cd ../..
          
          # Generate security report
          npm audit --json > reports/security-report.json || echo "Security audit completed"

      - name: Create production deployment package
        run: |
          echo "Creating production deployment package..."
          mkdir -p deployment
          
          # Copy backend
          mkdir -p deployment/backend
          cp -r apps/backend/src deployment/backend/
          cp apps/backend/package.json deployment/backend/
          cp apps/backend/package-lock.json deployment/backend/
          cp apps/backend/.env.example deployment/backend/ 2>/dev/null || echo "No backend .env.example"
          
          # Copy frontend build
          mkdir -p deployment/frontend
          cp -r apps/frontend/dist deployment/frontend/ 2>/dev/null || echo "No frontend dist"
          cp apps/frontend/package.json deployment/frontend/
          
          # Copy documentation
          cp -r docs deployment/docs 2>/dev/null || echo "No docs"
          cp README.md deployment/
          
          # Copy reports
          cp -r reports deployment/reports/
          
          # Install production dependencies for backend
          cd deployment/backend
          npm ci --production --ignore-scripts
          cd ../..
          
          # Create deployment README
          cat > deployment/DEPLOY.md << 'EOF'
          # Deployment Instructions
          
          ## Prerequisites
          - Node.js 18.x or higher
          - MongoDB Atlas account
          
          ## Backend Setup
          1. Navigate to `backend/` directory
          2. Copy `.env.example` to `.env` and configure
          3. Run: `npm start`
          
          ## Frontend Setup
          1. Serve the `frontend/dist/` directory with any static file server
          2. Configure VITE_API_URL to point to your backend
          
          ## Full Documentation
          See `docs/` folder for detailed guides.
          EOF
          2. Update `MONGODB_ATLAS_URI` with your MongoDB Atlas connection string
          3. Set `NODE_ENV=production`
          4. Set `PORT` (default: 3000)
          
          ## Running the Application
          ```bash
          npm start
          ```
          
          ## Health Check
          Visit: http://localhost:3000/health
          
          ## Environment Variables
          See `.env.example` for all required configuration.
          
          ## Reports
          This package includes CI/CD reports in the `reports/` directory:
          - Test results (test-results/)
          - Code coverage (coverage/)
          - Lint report (lint-report/)
          - Security audit (security-report.json)
          EOF
          
          cd ..
          
          # Create deployment package
          cd deployment
          zip -r ../deployment-package-${{ github.run_id }}.zip .
          cd ..

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment-package-*.zip
          retention-days: 90