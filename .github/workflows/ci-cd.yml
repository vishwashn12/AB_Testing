name: Node.js CI/CD Pipeline with MongoDB Atlas

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # ======================================
  # BUILD STAGE
  # ======================================
  build:
    name: Build Stage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          echo "Installing project dependencies..."
          npm ci

      - name: Build the project
        run: |
          echo "Building project..."
          npm run build --if-present

  # ======================================
  # TEST STAGE
  # ======================================
  test:
    name: Test Stage
    runs-on: ubuntu-latest
    needs: build

    env:
      NODE_ENV: test
      MONGODB_ATLAS_URI: ${{ secrets.MONGODB_ATLAS_URI_TEST }}
      JEST_JUNIT_OUTPUT_DIR: test-results

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Unit + Integration Tests
        run: |
          echo "Running tests with MongoDB Atlas..."
          npm test

  # ======================================
  # COVERAGE STAGE
  # ======================================
  coverage:
    name: Coverage Stage
    runs-on: ubuntu-latest
    needs: test

    env:
      MONGODB_ATLAS_URI: ${{ secrets.MONGODB_ATLAS_URI_TEST }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate coverage report
        run: |
          if [ -f package.json ] && grep -q '"coverage"' package.json; then
            npm run coverage
          else
            echo "No coverage script found. Running tests with coverage directly..."
            npx jest --coverage --coverageReporters=text-lcov > lcov.info || true
          fi

  # ======================================
  # LINT STAGE
  # ======================================
  lint:
    name: Lint Stage
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: |
          echo "Running ESLint..."
          if [ -f package.json ] && grep -q '"lint"' package.json; then
            npm run lint
          else
            npx eslint . --ext .js,.jsx,.ts,.tsx
          fi

      - name: Save lint report
        if: always()
        run: |
          mkdir -p lint-report
          npx eslint . --ext .js,.jsx,.ts,.tsx -f html -o lint-report/eslint-report.html 2>/dev/null || echo "Lint report generation failed"

  # ======================================
  # SECURITY SCAN STAGE
  # ======================================
  security:
    name: Security Scan Stage
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          echo "Running npm audit..."
          npm audit --audit-level moderate

      - name: Run security audit with report
        if: always()
        run: |
          npm audit --json > security-report.json || echo "Security audit completed with issues"

  # ======================================
  # DEPLOYMENT ARTIFACT STAGE
  # ======================================
  deploy:
    name: Deployment Artifact
    runs-on: ubuntu-latest
    needs: [build, test, coverage, lint, security]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run all report generation
        run: |
          # Create reports directory
          mkdir -p reports
          
          # Generate test results
          npm test || echo "Tests completed"
          cp -r test-results reports/ 2>/dev/null || echo "No test results"
          cp junit.xml reports/ 2>/dev/null || echo "No junit.xml"
          
          # Generate coverage report
          npm run coverage || npx jest --coverage || echo "Coverage completed"
          cp -r coverage reports/ 2>/dev/null || echo "No coverage directory"
          cp lcov.info reports/ 2>/dev/null || echo "No lcov.info"
          
          # Generate lint report
          mkdir -p reports/lint-report
          npx eslint . --ext .js,.jsx,.ts,.tsx -f html -o reports/lint-report/eslint-report.html 2>/dev/null || echo "Lint report generated"
          
          # Generate security report
          npm audit --json > reports/security-report.json || echo "Security audit completed"

      - name: Create deployment package
        run: |
          mkdir -p deployment
          # Copy source files
          cp -r src/ deployment/ 2>/dev/null || echo "No src directory"
          cp -r dist/ deployment/ 2>/dev/null || echo "No dist directory"
          cp -r build/ deployment/ 2>/dev/null || echo "No build directory"
          cp README.md package.json package-lock.json deployment/ 2>/dev/null || echo "Some files missing"
          
          # Copy reports to deployment package
          cp -r reports deployment/ 2>/dev/null || echo "No reports to copy"
          
          # Create deployment package
          cd deployment
          zip -r ../deployment-package-${{ github.run_id }}.zip .
          cd ..

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment-package-*.zip
          retention-days: 30