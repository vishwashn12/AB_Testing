name: Monorepo CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # ======================================
  # BUILD STAGE
  # ======================================
  build:
    name: Build Stage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install root dependencies
        run: |
          echo "Installing root dependencies..."
          npm ci

      - name: Build backend
        run: |
          echo "Building backend..."
          npm run build:backend --if-present

      - name: Build frontend
        run: |
          echo "Building frontend..."
          npm run build:frontend

  # ======================================
  # TEST STAGE
  # ======================================
  test:
    name: Test Stage
    runs-on: ubuntu-latest
    needs: build

    env:
      NODE_ENV: test
      MONGODB_ATLAS_URI: ${{ secrets.MONGODB_ATLAS_URI || '' }}
      JEST_JUNIT_OUTPUT_DIR: test-results

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Backend Tests
        run: |
          echo "Running backend tests..."
          npm run test:backend

      - name: Run Frontend Tests
        run: |
          echo "Running frontend tests..."
          npm run test:frontend

  # ======================================
  # COVERAGE STAGE
  # ======================================
  coverage:
    name: Coverage Stage
    runs-on: ubuntu-latest
    needs: test

    env:
      MONGODB_ATLAS_URI: ${{ secrets.MONGODB_ATLAS_URI || '' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate backend coverage report
        run: |
          echo "Generating coverage for backend..."
          cd apps/backend
          npm run coverage || npx jest --coverage || echo "Coverage completed"

  # ======================================
  # LINT STAGE
  # ======================================
  lint:
    name: Lint Stage
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Linting
        run: |
          echo "Running linting for all apps..."
          npm run lint

      - name: Save lint reports
        if: always()
        run: |
          mkdir -p lint-report
          cd apps/backend
          npx eslint . --ext .js,.jsx,.ts,.tsx -f html -o ../../lint-report/backend-lint.html 2>/dev/null || echo "Backend lint report done"
          cd ../frontend
          npx eslint . --ext .js,.jsx,.ts,.tsx -f html -o ../../lint-report/frontend-lint.html 2>/dev/null || echo "Frontend lint report done"

  # ======================================
  # SECURITY SCAN STAGE
  # ======================================
  security:
    name: Security Scan Stage
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          echo "Running npm audit..."
          npm audit --audit-level moderate

      - name: Run security audit with report
        if: always()
        run: |
          npm audit --json > security-report.json || echo "Security audit completed with issues"

  # ======================================
  # DEPLOYMENT ARTIFACT STAGE
  # ======================================
  deploy:
    name: Deployment Artifact
    runs-on: ubuntu-latest
    needs: [build, test, coverage, lint, security]

    env:
      NODE_ENV: test
      MONGODB_ATLAS_URI: ${{ secrets.MONGODB_ATLAS_URI || '' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate all reports
        run: |
          # Create reports directory
          mkdir -p reports
          
          # ============================================
          # BACKEND REPORTS
          # ============================================
          echo "Generating backend reports..."
          cd apps/backend
          
          # Backend tests
          npm test || echo "Backend tests completed"
          cp -r test-results ../../reports/backend-test-results 2>/dev/null || echo "No backend test results"
          cp junit.xml ../../reports/ 2>/dev/null || echo "No junit.xml"
          
          # Backend coverage
          npm run coverage || npx jest --coverage || echo "Coverage completed"
          cp -r coverage ../../reports/backend-coverage 2>/dev/null || echo "No coverage directory"
          cp lcov.info ../../reports/backend-lcov.info 2>/dev/null || echo "No lcov.info"
          
          cd ../..
          
          # ============================================
          # FRONTEND REPORTS
          # ============================================
          echo "Generating frontend reports..."
          cd apps/frontend
          
          # Frontend tests & coverage
          npm run coverage || echo "Frontend coverage completed"
          cp -r coverage ../../reports/frontend-coverage 2>/dev/null || echo "No frontend coverage directory"
          
          cd ../..
          
          # ============================================
          # LINT REPORTS
          # ============================================
          echo "Generating lint reports..."
          mkdir -p reports/lint-report
          
          cd apps/backend
          npx eslint . --ext .js -f html -o ../../reports/lint-report/backend-eslint.html 2>/dev/null || echo "Backend lint report generated"
          
          cd ../frontend
          npx eslint . --ext .js,.jsx -f html -o ../../reports/lint-report/frontend-eslint.html 2>/dev/null || echo "Frontend lint report generated"
          
          cd ../..
          
          # ============================================
          # SECURITY REPORT
          # ============================================
          echo "Generating security report..."
          npm audit --json > reports/security-report.json || echo "Security audit completed"

      - name: Create production deployment package
        run: |
          echo "Creating production deployment package..."
          mkdir -p deployment
          
          # ============================================
          # COPY ENTIRE REPOSITORY STRUCTURE
          # ============================================
          echo "Copying entire repository structure..."
          
          # Copy all repository files and folders
          rsync -av --progress \
            --exclude 'node_modules' \
            --exclude '.git' \
            --exclude '.github' \
            --exclude 'deployment' \
            --exclude '*.zip' \
            ./ deployment/
          
          # ============================================
          # ADD REPORTS - Organized by app
          # ============================================
          echo "Adding reports..."
          mkdir -p deployment/ci-reports/backend deployment/ci-reports/frontend
          
          # Backend reports
          echo "Copying backend reports..."
          if [ -d "reports/backend-test-results" ]; then
            cp -r reports/backend-test-results deployment/ci-reports/backend/test-results
          fi
          if [ -d "reports/backend-coverage" ]; then
            cp -r reports/backend-coverage deployment/ci-reports/backend/coverage
          fi
          if [ -f "reports/backend-lcov.info" ]; then
            cp reports/backend-lcov.info deployment/ci-reports/backend/
          fi
          if [ -f "reports/lint-report/backend-eslint.html" ]; then
            mkdir -p deployment/ci-reports/backend/lint
            cp reports/lint-report/backend-eslint.html deployment/ci-reports/backend/lint/report.html
          fi
          
          # Frontend reports
          echo "Copying frontend reports..."
          if [ -d "reports/frontend-coverage" ]; then
            cp -r reports/frontend-coverage deployment/ci-reports/frontend/coverage
          fi
          if [ -f "reports/lint-report/frontend-eslint.html" ]; then
            mkdir -p deployment/ci-reports/frontend/lint
            cp reports/lint-report/frontend-eslint.html deployment/ci-reports/frontend/lint/report.html
          fi
          
          # Security report (root level)
          if [ -f "reports/security-report.json" ]; then
            cp reports/security-report.json deployment/ci-reports/security-report.json
          fi
          
          # ============================================
          # CREATE DEPLOYMENT PACKAGE (ZIP)
          # ============================================
          echo "Creating deployment archive..."
          
          # Create zip from deployment folder
          cd deployment
          zip -r ../deployment-package-${{ github.run_id }}.zip . \
            -x "node_modules/*" \
            -x "*/node_modules/*" \
            -x ".git/*" \
            -x "*/.git/*" \
            -x ".DS_Store" \
            -x "*/.DS_Store"
          cd ..
          
          # Show package info
          echo "✓ Deployment package created!"
          ls -lh deployment-package-${{ github.run_id }}.zip
          echo ""
          echo "Package contents:"
          unzip -l deployment-package-${{ github.run_id }}.zip | head -50

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment-package-*.zip
          retention-days: 90