name: Monorepo CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # ======================================
  # BUILD STAGE
  # ======================================
  build:
    name: Build Stage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install root dependencies
        run: |
          echo "Installing root dependencies..."
          npm ci

      - name: Build backend
        run: |
          echo "Building backend..."
          npm run build:backend --if-present

      - name: Build frontend
        run: |
          echo "Building frontend..."
          npm run build:frontend

  # ======================================
  # TEST STAGE
  # ======================================
  test:
    name: Test Stage
    runs-on: ubuntu-latest
    needs: build

    env:
      NODE_ENV: test
      MONGODB_ATLAS_URI: ${{ secrets.MONGODB_ATLAS_URI || '' }}
      JEST_JUNIT_OUTPUT_DIR: test-results

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Backend Tests
        run: |
          echo "Running backend tests..."
          npm run test:backend

      - name: Run Frontend Tests
        run: |
          echo "Running frontend tests..."
          npm run test:frontend

  # ======================================
  # COVERAGE STAGE
  # ======================================
  coverage:
    name: Coverage Stage
    runs-on: ubuntu-latest
    needs: test

    env:
      MONGODB_ATLAS_URI: ${{ secrets.MONGODB_ATLAS_URI || '' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate backend coverage report
        run: |
          echo "Generating coverage for backend..."
          cd apps/backend
          npm run coverage || npx jest --coverage || echo "Coverage completed"

  # ======================================
  # LINT STAGE
  # ======================================
  lint:
    name: Lint Stage
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Linting
        run: |
          echo "Running linting for all apps..."
          npm run lint

      - name: Save lint reports
        if: always()
        run: |
          mkdir -p lint-report
          cd apps/backend
          npx eslint . --ext .js,.jsx,.ts,.tsx -f html -o ../../lint-report/backend-lint.html 2>/dev/null || echo "Backend lint report done"
          cd ../frontend
          npx eslint . --ext .js,.jsx,.ts,.tsx -f html -o ../../lint-report/frontend-lint.html 2>/dev/null || echo "Frontend lint report done"

  # ======================================
  # SECURITY SCAN STAGE
  # ======================================
  security:
    name: Security Scan Stage
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          echo "Running npm audit..."
          npm audit --audit-level moderate

      - name: Run security audit with report
        if: always()
        run: |
          npm audit --json > security-report.json || echo "Security audit completed with issues"

  # ======================================
  # DEPLOYMENT ARTIFACT STAGE
  # ======================================
  deploy:
    name: Deployment Artifact
    runs-on: ubuntu-latest
    needs: [build, test, coverage, lint, security]

    env:
      NODE_ENV: test
      MONGODB_ATLAS_URI: ${{ secrets.MONGODB_ATLAS_URI || '' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate all reports
        run: |
          # Create reports directory
          mkdir -p reports
          
          # ============================================
          # BACKEND REPORTS
          # ============================================
          echo "Generating backend reports..."
          cd apps/backend
          
          # Backend tests
          npm test || echo "Backend tests completed"
          cp -r test-results ../../reports/backend-test-results 2>/dev/null || echo "No backend test results"
          cp junit.xml ../../reports/ 2>/dev/null || echo "No junit.xml"
          
          # Backend coverage
          npm run coverage || npx jest --coverage || echo "Coverage completed"
          cp -r coverage ../../reports/backend-coverage 2>/dev/null || echo "No coverage directory"
          cp lcov.info ../../reports/backend-lcov.info 2>/dev/null || echo "No lcov.info"
          
          cd ../..
          
          # ============================================
          # FRONTEND REPORTS
          # ============================================
          echo "Generating frontend reports..."
          cd apps/frontend
          
          # Frontend tests & coverage
          npm run coverage || echo "Frontend coverage completed"
          cp -r coverage ../../reports/frontend-coverage 2>/dev/null || echo "No frontend coverage directory"
          
          cd ../..
          
          # ============================================
          # LINT REPORTS
          # ============================================
          echo "Generating lint reports..."
          mkdir -p reports/lint-report
          
          cd apps/backend
          npx eslint . --ext .js -f html -o ../../reports/lint-report/backend-eslint.html 2>/dev/null || echo "Backend lint report generated"
          
          cd ../frontend
          npx eslint . --ext .js,.jsx -f html -o ../../reports/lint-report/frontend-eslint.html 2>/dev/null || echo "Frontend lint report generated"
          
          cd ../..
          
          # ============================================
          # SECURITY REPORT
          # ============================================
          echo "Generating security report..."
          npm audit --json > reports/security-report.json || echo "Security audit completed"

      - name: Create production deployment package
        run: |
          echo "Creating production deployment package..."
          mkdir -p deployment
          
          # ============================================
          # BACKEND - Copy source and dependencies info
          # ============================================
          echo "Packaging backend..."
          mkdir -p deployment/backend
          
          # Copy backend source code
          cp -r apps/backend/src deployment/backend/
          
          # Copy backend config files
          cp apps/backend/package.json deployment/backend/
          cp apps/backend/.env.example deployment/backend/ 2>/dev/null || echo "Warning: No .env.example found"
          
          # Copy only package-lock for dependency installation (not node_modules)
          cp package-lock.json deployment/backend/
          
          # ============================================
          # FRONTEND - Copy built static files
          # ============================================
          echo "Packaging frontend..."
          mkdir -p deployment/frontend
          
          # Copy frontend dist (built files)
          if [ -d "apps/frontend/dist" ]; then
            cp -r apps/frontend/dist/* deployment/frontend/
            echo "✓ Frontend build included"
          else
            echo "⚠ No frontend build found - run 'npm run build:frontend' first"
          fi
          
          # ============================================
          # DOCUMENTATION & REPORTS
          # ============================================
          echo "Copying documentation and reports..."
          
          # Copy docs
          if [ -d "docs" ]; then
            cp -r docs deployment/
          fi
          
          # Copy root README
          cp README.md deployment/ 2>/dev/null || true
          
          # Copy CI/CD reports
          if [ -d "reports" ]; then
            cp -r reports deployment/
          fi
          
          # ============================================
          # CREATE DEPLOYMENT INSTRUCTIONS
          # ============================================
          cat > deployment/DEPLOY.md << 'EOF'
          # 🚀 Deployment Guide
          
          ## 📋 Prerequisites
          - Node.js 20.x or higher
          - MongoDB Atlas account with connection string
          - npm or yarn
          
          ## 🔧 Backend Deployment
          
          ### 1. Navigate to backend directory
          ```bash
          cd backend
          ```
          
          ### 2. Install dependencies
          ```bash
          npm ci --production
          ```
          
          ### 3. Configure environment
          ```bash
          cp .env.example .env
          ```
          
          Edit `.env` and set:
          - `MONGODB_ATLAS_URI` - Your MongoDB connection string
          - `NODE_ENV=production`
          - `PORT=3000` (or your preferred port)
          
          ### 4. Start the server
          ```bash
          npm start
          ```
          
          Or with PM2:
          ```bash
          pm2 start src/index.js --name ab-testing-backend
          ```
          
          ### 5. Verify
          ```bash
          curl http://localhost:3000/health
          ```
          
          ---
          
          ## 🌐 Frontend Deployment
          
          The `frontend/` directory contains pre-built static files ready to deploy.
          
          ### Option 1: Static Hosting (Vercel, Netlify, etc.)
          Upload the entire `frontend/` directory to your hosting provider.
          
          ### Option 2: Nginx
          ```nginx
          server {
              listen 80;
              server_name your-domain.com;
              root /path/to/deployment/frontend;
              index index.html;
              
              location / {
                  try_files $uri $uri/ /index.html;
              }
          }
          ```
          
          ### Option 3: Simple HTTP Server
          ```bash
          cd frontend
          npx serve -s . -p 8080
          ```
          
          ---
          
          ## 📊 Reports
          
          This package includes CI/CD reports in `reports/`:
          
          **Backend:**
          - Test Results: `backend-test-results/junit.xml`
          - Code Coverage: `backend-coverage/lcov-report/index.html`
          - Lint Report: `lint-report/backend-eslint.html`
          
          **Frontend:**
          - Code Coverage: `frontend-coverage/index.html`
          - Lint Report: `lint-report/frontend-eslint.html`
          
          **Security:**
          - Audit Report: `security-report.json`
          
          ---
          
          ## 🔍 Troubleshooting
          
          **Backend won't start:**
          - Check MongoDB connection string in `.env`
          - Ensure port is not in use: `lsof -i :3000`
          - Check logs for errors
          
          **Frontend 404 errors:**
          - Ensure server is configured for SPA routing
          - Set correct API URL in environment variables
          
          EOF
          
          # ============================================
          # CREATE DEPLOYMENT PACKAGE (ZIP)
          # ============================================
          echo "Creating deployment archive..."
          cd deployment
          
          # Exclude unnecessary files from zip
          zip -r ../deployment-package-${{ github.run_id }}.zip . \
            -x "*.git*" \
            -x "node_modules/*" \
            -x "*/node_modules/*" \
            -x ".DS_Store"
          
          cd ..
          
          # Show package info
          echo "✓ Deployment package created!"
          ls -lh deployment-package-${{ github.run_id }}.zip

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment-package-*.zip
          retention-days: 90